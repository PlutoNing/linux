ok: unsafe memmove() usage correctly detected with '__write_overflow' in lib/test_fortify/write_overflow-memmove.c
In file included from ./include/linux/string.h:254,
                 from ./include/linux/bitmap.h:11,
                 from ./include/linux/cpumask.h:12,
                 from ./arch/x86/include/asm/paravirt.h:17,
                 from ./arch/x86/include/asm/cpuid.h:62,
                 from ./arch/x86/include/asm/processor.h:19,
                 from ./arch/x86/include/asm/cpufeature.h:5,
                 from ./arch/x86/include/asm/thread_info.h:53,
                 from ./include/linux/thread_info.h:60,
                 from ./arch/x86/include/asm/preempt.h:9,
                 from ./include/linux/preempt.h:79,
                 from ./include/linux/spinlock.h:56,
                 from ./include/linux/mmzone.h:8,
                 from ./include/linux/gfp.h:7,
                 from ./include/linux/slab.h:16,
                 from lib/test_fortify/test_fortify.h:4,
                 from lib/test_fortify/write_overflow-memmove.c:5:
lib/test_fortify/test_fortify.h: In function 'do_fortify_tests':
./include/linux/fortify-string.h:58:30: error: '__builtin_memcpy' forming offset [25, 36] is out of the bounds [0, 24] of object 'instance' with type 'struct fortify_object' [-Werror=array-bounds]
 #define __underlying_memmove __builtin_memmove
                              ^
./include/linux/fortify-string.h:648:2: note: in expansion of macro '__underlying_memmove'
  __underlying_##op(p, q, __fortify_size);   \
  ^~~~~~~~~~~~~
./include/linux/fortify-string.h:697:27: note: in expansion of macro '__fortify_memcpy_chk'
 #define memmove(p, q, s)  __fortify_memcpy_chk(p, q, s,   \
                           ^~~~~~~~~~~~~~~~~~~~
lib/test_fortify/write_overflow-memmove.c:3:2: note: in expansion of macro 'memmove'
  memmove(instance.buf, large_src, sizeof(large_src))
  ^~~~~~~
lib/test_fortify/test_fortify.h:34:2: note: in expansion of macro 'TEST'
  TEST;
  ^~~~
In file included from lib/test_fortify/write_overflow-memmove.c:5:
lib/test_fortify/test_fortify.h:24:23: note: 'instance' declared here
 struct fortify_object instance;
                       ^~~~~~~~
In file included from ./include/linux/string.h:254,
                 from ./include/linux/bitmap.h:11,
                 from ./include/linux/cpumask.h:12,
                 from ./arch/x86/include/asm/paravirt.h:17,
                 from ./arch/x86/include/asm/cpuid.h:62,
                 from ./arch/x86/include/asm/processor.h:19,
                 from ./arch/x86/include/asm/cpufeature.h:5,
                 from ./arch/x86/include/asm/thread_info.h:53,
                 from ./include/linux/thread_info.h:60,
                 from ./arch/x86/include/asm/preempt.h:9,
                 from ./include/linux/preempt.h:79,
                 from ./include/linux/spinlock.h:56,
                 from ./include/linux/mmzone.h:8,
                 from ./include/linux/gfp.h:7,
                 from ./include/linux/slab.h:16,
                 from lib/test_fortify/test_fortify.h:4,
                 from lib/test_fortify/write_overflow-memmove.c:5:
In function 'fortify_memcpy_chk',
    inlined from 'do_fortify_tests' at lib/test_fortify/test_fortify.h:34:2:
./include/linux/fortify-string.h:576:4: error: call to '__write_overflow' declared with attribute error: detected write beyond size of object (1st parameter)
    __write_overflow();
    ^~~~~~~~~~~~~~~~~~
./include/linux/fortify-string.h:583:4: error: call to '__write_overflow_field' declared with attribute warning: detected write beyond size of field (1st parameter); maybe use struct_group()? [-Werror]
    __write_overflow_field(p_size_field, size);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1: all warnings being treated as errors
